#compdef cvc
unset _cvc_commands _cvc_aliases _cvc_aliasmap _cvc_descriptions
typeset -ga _cvc_commands _cvc_aliases
typeset -gA _cvc_aliasmap _cvc_descriptions

_cvc_aliasmap=(
    ci      commit
    co      checkout
    rm      remove
    st      status
    stat    status
    up      update
)
    
_cvc_descriptions=(
        add             "Add a file to be controlled by Conary"
        addkey          "Adds a public key from stdin to a repository"
        annotate        "Show version information for each line in a file"
        checkout        "Check out a source component"
        clone           "Copy troves from one branch to another in a repository"
        commit          "Commit changes to a source component"
        config          "Display the current configuration"
        context         "Set up a context in the current directory"
        cook            "Build binary package and groups from a recipe"
        derive          "Create a derived package"
        diff            "Show uncommitted changes"
        explain         "Display Conary recipe documentation"
        factory         "Show or change the factory for the working directory"
        getkey          "Retrieves a specified public key from a repository"
        help            "Display help information"
        listkeys        "Lists the public key fingerprints for a specified user"
        log             "Show changelog entries for this source component"
        merge           "Merge changes made in a parent branch into the current directory"
        newpkg          "Set a directory for creating a new package"
        promote         "Copy troves from one label to another in a repository"
        rdiff           "Show changes between two versions of a trove in a repository"
        refresh         "Refresh files that are automatically downloaded"
        remove          "Remove a file from Conary control"
        rename          "Rename a file that is under Conary control"
        revert          "Revert local changes to one or more files"
        set             "Set the properties of a file under Conary control"
        shadow          "Create a shadow in a repository"
        sign            "Add a digital signature to troves in a repository"
        status          "Show changed files in the working directory"
        update          "Update files in one or more directories to a different version"
)
function _cvc-add() {
    [[ -n ${cvc_describe} ]] && __cvc-describe $0 && return
    _arguments -C \
        '(--binary --text)'{--binary,--text}'[specify filetype]' \
        '*::specify non-tracked file:__cvc-files-notrack' 
}

function _cvc-help() {
    [[ -n ${cvc_describe} ]] && __cvc-describe $0 && return
    _arguments -C \
        '--verbose[verbose output]' \
        ':cvc subcommand:__cvc-list-subcommands'
}

function _cvc-merge() {
    [[ -n ${cvc_describe} ]] && __cvc-describe $0 && return
    local -a allvers
    if [ -f "CONARY" ]; then
        allvers=( $(conary rq --all-versions ${${${${(f)$(cat CONARY)}#* name }/ version \//=}%%/*}) )
        if (( ${#allvers} > 0 )); then
            compadd $allvers
        else
            message -e "no upstream versions found, completing package name instead"
            compadd ${${${(f)$(cat CONARY)}#* name }%% version *}
        fi
    else
        _message -e "No CONARY state found, falling back"
        _files
    fi
}
    
function __cvc-describe() {
    if [ -n ${_cvc_descriptions[${1#_cvc-}]} ]; then
        print "${_cvc_descriptions[${1#_cvc-}]}"
    else
        print "description not found for ${1#_cvc-}"
    fi
}

function __cvc-files-notrack() {
    local -a files
    if [ -f "CONARY" ]; then
        files=( ${(q)${(f)"$(command cvc status 2>/dev/null |grep '^\?')"}/\?\ \ /} )
        if (( ${#files} > 0 )); then
            _describe -t files-notrack 'Files not currently tracked' files
        else
            _describe -t no-modified-files 'No untracked files, falling back' _files
        fi
    else
        _message -e "No CONARY state found, falling back"
        _files
    fi    
}

function __cvc-list-subcommands() {
    _describe -t subcommands "cvc subcommands" _cvc_commands
    _describe -t subcommands "cvc alias" _cvc_aliases
}

function _cvc() {
    local curcontext="${curcontext}"
    local mode state ret
    local -a args 
    local -x cvc_command
    unset cvc_describe

    args=(
        '--config[pass configuration parameter to command]:->_conary_config'
        '(- :)--version[display version information]'
        '(- :)--help[display help message]'
        '(-): :->command'
        '*:: :->option_or_argument'
    )

    _arguments -C -s -w ${args} && return

    case $state in
        (command)
            compadd -X "cvc subcommands" ${(k)_cvc_descriptions}
            compadd -X "cvc aliases" ${(k)_cvc_aliasmap}
#            _describe -t subcommands "cvc subcommands" _cvc_commands
#            _describe -t subcommands "cvc alias" _cvc_aliases
        ;;
        (option_or_argument)
            if (( ${+commands[cvc]} == 0 )); then 
                _message 'cvc not found in $path; sub-cmd completions disabled.'
                _files
                return 0
            fi
            cvc_command="${words[1]}"
            if [[ -n ${_cvc_aliasmap[$cvc_command]} ]] ; then
                cvc_command="${_cvc_aliasmap[$cvc_command]}"
            fi
            if ! (( ${+functions[_cvc-$cvc_command]} )); then
              local low high
              low=$_cvc_commands[(i)$cvc_command*]
              high=$_cvc_commands[(I)$cvc_command*]
              if (( low == high )); then
                cvc_command=${_cvc_commands[low]%%:*}
              elif (( low < high )); then
                _message -e "Ambiguous command $cvc_command"
              else
                _message -e "Subcommand $cvc_command not known"
                _files
              fi
            fi
            curcontext="${curcontext%:*:*}:cvc-${cvc_command}:"
            _call_function ret _cvc-${cvc_command}
        ;;
    esac
}

local f desc 
local -A rev
local -x cvc_describe
cvc_describe='please'

for f ( ${(k)_cvc_aliasmap} ) {
    rev+=( ${_cvc_aliasmap[$f]} $f )
}

for f ( ${(M)${(k)functions}:#_cvc-*} ) {
    desc="$($f)"
    _cvc_commands+=( "${f#_cvc-}${desc:+:$desc}" )
    [[ -n ${rev[${f#_cvc-}]} ]] && _cvc_aliases+=( "${rev[${f#_cvc-}]}${desc:+:$desc}" )
}
unset desc f rev cvc_describe
_cvc
