#compdef cvc
unset _cvc_commands _cvc_aliases _cvc_aliasmap
typeset -ga _cvc_commands _cvc_aliases
typeset -gA _cvc_aliasmap

_cvc_aliasmap=(
    ci      commit
    co      checkout
    rm      remove
    st      status
    stat    status
    up      update
)
    
function _cvc-add() {
    [[ -n ${cvc_describe} ]] && print "Add a file to be controlled by Conary" && return
    _arguments -C \
        '(--binary --text)'{--binary,--text}'[specify filetype]' \
        '*::specify non-tracked file:__cvc-files-notrack' 
}

function _cvc-help() {
    [[ -n ${cvc_describe} ]] && print "Display help information" && return 
    local -a helptopics
    helptopics=( ${_cvc_commands} ${_cvc_aliases} )
    _arguments '1:[CVC Command]:helptopics'
}

function __cvc-files-notrack() {
    local -a files
    files=( ${(q)${(f)"$(command cvc status 2>/dev/null |grep '^\?')"}/\?\ \ /} )
    _describe -t files-notrack 'Files not currently tracked' files "$@"
}

function _cvc() {
    local curcontext="${curcontext}"
    local mode state ret
    local -a args 
    local -x cvc_command
    unset cvc_describe

    args=(
        '--config[pass configuration parameter to command]:->_conary_config'
        '(- :)--version[display version information]'
        '(- :)--help[display help message]'
        '(-): :->command'
        '*:: :->option_or_argument'
    )

    _arguments -C -s -w ${args} && return

    case $state in
        (command)
            _describe -t subcommands "CVC Subcommands" _cvc_commands
            _describe -t subcommands "CVC Alias" _cvc_aliases
        ;;
        (option_or_argument)
            if (( ${+commands[cvc]} == 0 )); then 
                _message 'cvc not found in $path; sub-cmd completions disabled.'
                return 0
            fi
            cvc_command="${words[1]}"
            if [[ -n ${_cvc_aliasmap[$cvc_command]} ]] ; then
                cvc_command="${_cvc_aliasmap[$cvc_command]}"
            fi
            if ! (( ${+functions[_cvc-$cvc_command]} )); then
              local low high
              low=$_cvc_commands[(i)$cvc_command*]
              high=$_cvc_commands[(I)$cvc_command*]
              if (( low == high )); then
                cvc_command=${_cvc_commands[low]%%:*}
              elif (( low < high )); then
                _message -e "Ambiguous command $cvc_command"
              else
                _message -e "Subcommand $cvc_command not known"
              fi
            fi
            curcontext="${curcontext%:*:*}:cvc-${cvc_command}:"
            _call_function ret _cvc-${cvc_command}
        ;;
    esac
}

local f desc 
local -A rev
local -x cvc_describe
cvc_describe='please'

for f ( ${(k)_cvc_aliasmap} ) {
    rev+=( ${_cvc_aliasmap[$f]} $f )
}

for f ( ${(M)${(k)functions}:#_cvc-*} ) {
    desc="$($f)"
    _cvc_commands+=( "${f#_cvc-}${desc:+:$desc}" )
    [[ -n ${rev[${f#_cvc-}]} ]] && _cvc_aliases+=( "${rev[${f#_cvc-}]}${desc:+:$desc}" )
}
unset desc f rev cvc_describe
_cvc
