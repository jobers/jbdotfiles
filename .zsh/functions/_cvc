#compdef cvc

#helper functions

#(( $+functions[_cvc_commands] )) ||
_cvc_commands () {
    local ret=1
    local -a short_operations
    short_operations=(
        ci:'Commit changes to a source component'
        co:'Check out a source component'
        rm:'Remove a file from Conary control'
        st:'Show changed files in the working directory'
        status:'Show changed files in the working directory'
        up:'Update files in one or more directories to a different version')

    local -a file_operations 
    file_operations=(
        add:'Add a file to be controlled by Conary'
        merge:'Merge changes made in a parent branch into the current directory'
        refresh:'Refresh files that are automatically downloaded'
        remove:'Remove a file from Conary control'
        rename:'Rename a file that is under Conary control'
        revert:'Revert local changes to one or more files'
        set:'Set the properties of a file under Conary control'
        update:'Update files in one or more directories to a different version')
    
    local -a information_display
    information_display=(
        annotate:'Show version information for each line in a file'
        config:'Display the current configuration'
        diff:'Show uncommitted changes'
        explain:'Display Conary recipe documentation'
        factory:'Show or change the factory for the working directory'
        help:'Display help information'
        log:'Show changelog entries for this source component'
        rdiff:'Show changes between two versions of a trove in a repository'
        status:'Show changed files in the working directory')
    
    local -a key_management
    key_management=(
        addkey:'Adds a public key from stdin to a repository'
        getkey:'Retrieves a specified public key from a repository'
        listkeys:'Lists the public key fingerprints for a specified user')
    
    local -a recipe_building
    recipe_building=(
        cook:'Build binary package and groups from a recipe')
    
    local -a repository_access
    repository_access=(
        checkout:'Check out a source component'
        clone:'Copy troves from one branch to another in a repository'
        commit:'Commit changes to a source component'
        derive:'Create a derived package'
        promote:'Copy troves from one label to another in a repository'
        shadow:'Create a shadow in a repository'
        sign:'Add a digital signature to troves in a repository')

    local -a setup_commands
    setup_commands=(
        context:'Set up a context in the current directory'
        newpkg:'Set a directory for creating a new package')
    
    _describe -t short-operations 'shortcuts for other operations' short_operations         
    _describe -t file-operations 'used to manage files in the source directory' file_operations
    _describe -t info-display 'display cvc configuration and configuration files' information_display 
    _describe -t key-management 'used for client-server public key interaction' key_management 
    _describe -t recipe-building 'build recipes' recipe_building 
    _describe -t repo-access 'interact with the conary repository' repository_access 
    _describe -t setup-commands 'used in the creation of new contexts and packages' setup_commands && ret=0

    return ret
}

#(( $+functions[_cvc_common_options] )) ||
_cvc_common_options () {
    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args
    ret=0 
    return ret       
}
    
#(( $+functions[_cvc-add] )) ||
_cvc-add () {
    local curcontext="$curcontext" state line ret=1 filelist cvc_status
    typeset -A opt_args
    filelist=()
    if [[ -f "CONARY" ]]; then
        filelist=$(cvc status |grep '^\?\ ' | cut -b 4-)
    fi               
    _arguments -S \
          '(--binary --text)'{--binary,--text}'[specify filetype]' \
          '*:FYI NO statefile found so listing all files:->file' && return

    case $state in
        (file)
        if [ -f "CONARY"  ]; then
            _describe -t files 'Files not under control' filelist && ret=0 
        else
            _files
        fi
        ;;
    esac
    return ret
}

#(( $+functions[_cvc-help] )) ||
_cvc-help () {
    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args

    _arguments \
        '--verbose[show verbose help]' \
        ': :->commands' && return
    
    case $state in
        (commands)
            _cvc_commands && ret=0    
        ;;
    esac

    return ret
}

#(( $+functions[_cvc-merge] )) ||
_cvc-merge () {
    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args
    
    return ret       
}

#(( $+functions[_cvc-remove] )) ||
_cvc-remove () {
    zmodload zsh/pcre
    local curcontext="$curcontext" state line ret=1 state_file filelist
    typeset -A opt_arg
    filelist=()
    if [[ -f "CONARY" ]]; then
        filelist=()
        state_file="$(print ${${${${${${"$(<CONARY)"}#stateversion *$'\n'name *$'\n'version *$'\n'branch *$'\n'}#lastmerged *$'\n'}#factory *$'\n'}#[0-9]*$'\n'}} | perl -pe 's@\w{32}\ (.*)\ \w{40}\ (config|refresh|autosource)\ .*$@$1@' )"
#        filelist=( "${(q)$(print "$state_file"| perl -pe 's@\w{32}\ (.*)\ \w{40}\ (config|refresh|autosource)\ .*$@$1@' | perl -pe 's@\ @\\ @g' )}" )
    fi
            
    _arguments -S \
          '*:FYI No statefile found so listing all files:->file' && return

    case $state in
        (file)
        if [[ -f "CONARY" ]]; then
            _describe -t files 'Files under CVC control' filelist && ret=0 
        else
            _files
        fi
        ;;
    esac
    return ret
}

_cvc() {
    local curcontext=$curcontext state line ret=1
    typeset -A opt_args
    _arguments -C \
        {-c,--config=}'[pass configuration parameter to command]:->_conary_config' \
        '(- :)--version[display version information]' \
        '(- :)--help[display help message]' \
        '(-): :->command' \
        '*:: :->option-or-argument' && return

    case $state in
        (command)
            _cvc_commands && ret=0
        ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:cvc-$words[1]:
            if (( $+functions[_cvc-$words[1]] )) ; then
                _call_function ret _cvc-$words[1]
            elif zstyle -T :completion:$curcontext: use-fallback; then
                _files && ret=0
            else
                _message 'unknown sub-command'
            fi
        ;;
    esac
  return ret
}

_cvc "$@"
