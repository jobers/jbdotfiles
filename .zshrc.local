# Filename:      /etc/skel/.zshrc
# Purpose:       config file for zsh (z shell)
# Authors:       (c) grml-team (grml.org)
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################
# Nowadays, grml's zsh setup lives in only *one* zshrc file.
# That is the global one: /etc/zsh/zshrc (from grml-etc-core).
# It is best to leave *this* file untouched and do personal changes to
# your zsh setup via ${HOME}/.zshrc.local which is loaded at the end of
# the global zshrc.
#
# That way, we enable people on other operating systems to use our
# setup, too, just by copying our global zshrc to their ${HOME}/.zshrc.
# Adjustments would still go to the .zshrc.local file.
################################################################################
## Now, we'll give a few examples of what you might want to use in your
## .zshrc.local file (just copy'n'paste and uncomment it there):
## ZLE tweaks ##
## use the vi navigation keys (hjkl) besides cursor keys in menu completion
#bindkey -M menuselect 'h' vi-backward-char        # left
#bindkey -M menuselect 'k' vi-up-line-or-history   # up
#bindkey -M menuselect 'l' vi-forward-char         # right
#bindkey -M menuselect 'j' vi-down-line-or-history # bottom
## press ctrl-q to quote line:
mquote () {
      zle beginning-of-line
      zle forward-word
      # RBUFFER="'$RBUFFER'"
      RBUFFER=${(q)RBUFFER}
      zle end-of-line
}
zle -N mquote && bindkey '^q' mquote

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
#WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default

bindkey '\eq' push-line-or-edit
## warning if file exists ('cat /dev/null > ~/.zshrc')
setopt NO_CLOBBER
setopt printexitvalue
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

zstyle ':completion:*' completer _expand_alias _complete _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"

## aliases ##
[[ -x $(whence python) ]] && alias 'epdb'='/bin/echo -e "import epdb\nepdb.st()\n" | /usr/bin/python '
alias 'nrsync'='rsync -ahP --inplace  '
alias 'qmplayer'='mplayer -osdlevel 3 -nosound -speed 3.1 '
[[ -f "/etc/conary/system-model" ]] && alias 'visystem-model'='sudo ${EDITOR} /etc/conary/system-model '

## global aliases (for those who like them) ##
alias -g GG='|grep'
alias -g Hl=' --help |& less -r'
alias -g LL='|& less -r'
alias -g SL='| sort | less'
alias -g V='| vim -'



export EDITOR=vim
export MANWIDTH=${MANWIDTH:-80}
## Some quick Perl-hacks aka /useful/ oneliner
#bew() { perl -le 'print unpack "B*","'$1'"' }
#web() { perl -le 'print pack "B*","'$1'"' }
#hew() { perl -le 'print unpack "H*","'$1'"' }
#weh() { perl -le 'print pack "H*","'$1'"' }
#pversion()    { perl -M$1 -le "print $1->VERSION" } # i. e."pversion LWP -> 5.79"
#getlinks ()   { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }
#gethrefs ()   { perl -ne 'while ( m/href="([^"]*)"/gc ) { print $1, "\n"; }' $* }
#getanames ()  { perl -ne 'while ( m/a name="([^"]*)"/gc ) { print $1, "\n"; }' $* }
#getforms ()   { perl -ne 'while ( m:(\</?(input|form|select|option).*?\>):gic ) { print $1, "\n"; }' $* }
#getstrings () { perl -ne 'while ( m/"(.*?)"/gc ) { print $1, "\n"; }' $*}
#getanchors () { perl -ne 'while ( m/«([^«»\n]+)»/gc ) { print $1, "\n"; }' $* }
#showINC ()    { perl -e 'for (@INC) { printf "%d %s\n", $i++, $_ }' }
#vimpm ()      { vim `perldoc -l $1 | sed -e 's/pod$/pm/'` }
#vimhelp ()    { vim -c "help $1" -c on -c "au! VimEnter *" }

#Prompt foo
# See if we can use colors.
autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
if [[ "${TERM}" == "xterm" || "${TERM}" == "xterm-color"  || "${TERM}" == "screen"  || "${TERM}" == "screen-bce"  || "${TERM}" == "screen-256color-bce" || "$TERM" == "xterm-256color" ]]; then
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
    (( count = $count + 1 ))
done
fi

# dircolors 
[[ -f "~/.zsh/dircolors.256light" ]] && eval $(dircolors "~/.zsh/dircolors.256light" )

PR_NO_COLOUR="%{$terminfo[sgr0]%}o"

_prf_load () {
    print -- "${${=$(uptime)}[-3,-1]}"
    return 0
}

_prf_one () {
    print -- "\n$PR_MAGENTA%n$PR_WHITE %bon $PR_BLUE%M$PR_WHITE %bon $PR_CYAN%y $PR_WHITE%b[ $prf_load ] ($?)"
    return 0
}

_prf_two () {
    print -- "\n$PR_WHITE%b(%*) %! $PR_BLUE%d$PR_WHITE %# >$PR_WHITE%b "
    return 0
}

_prf_one_r () {
    print -- ""
    return 0
}

PERIOD=1
periodic () {
prf_load="$(_prf_load)"
PS1="$(_prf_one)$(_prf_two)"
RPS1="${vcs_info_msg_0_}"
}

bindkey -e
## END OF FILE #################################################################
